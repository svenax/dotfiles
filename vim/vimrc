" Vimrc file
" Sven Axelsson <sven@axelsson.name>
"
" Completely rewritten using Vundle instead of Pathogen.
" Many bundles I rarely (never) used have been removed.
" Others have been added (maybe still too many).

set nocompatible
filetype off

" Plugin loading --------------------------------------------------------------
" Add simple configurations directly below each plugin, more complicated
" stuff in a separate section further down.

" Set the runtime path to include Vundle and initialize.
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'altercation/vim-colors-solarized' "{{{
let g:solarized_menu=0
let g:solarized_hitrail=1
" }}}
Plugin 'bling/vim-airline' " {{{
if has("gui_running")
    let g:airline_powerline_fonts = 1
else
    let g:airline_powerline_fonts = 0
    " Use Unicode characters so I can use an unpatched font.
    let g:airline_exclude_preview=1
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '>'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '<'

    if !exists('g:airline_symbols')
        " This seems to be the case when running in a terminal window.
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.readonly = '◆'
endif
" }}}
Plugin 'brianclements/vim-popwindow' " {{{
nnoremap <silent> <C-w><BS> :PopWindow<CR>
" }}}
Plugin 'ctrlpvim/ctrlp.vim' "{{{
" Depends on 'nixprime/cpsm'
let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}
" }}}
Plugin 'd11wtq/ctrlp_bdelete.vim' "{{{
" Depends on 'ctrlpvim/ctrlp.vim'
" See initialization section
" }}}
Plugin 'derekwyatt/vim-fswitch'
Plugin 'derekwyatt/vim-scala'
Plugin 'dyng/ctrlsf.vim'
Plugin 'editorconfig/editorconfig-vim' " Depends on 'vim-scripts/PreserveNoEOL'
Plugin 'embear/vim-foldsearch'
Plugin 'ervandew/supertab' " {{{
let g:SuperTabDefaultCompletionType = "context"
autocmd FileType *
  \ if &omnifunc != '' |
  \   call SuperTabChain(&omnifunc, "<c-p>") |
  \ endif
" }}}
Plugin 'glts/vim-textobj-comment'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'junegunn/vim-easy-align' " {{{
vmap <Enter> <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
" }}}
Plugin 'justinmk/vim-sneak' " {{{
let g:sneak#streak = 1
" }}}
Plugin 'kana/vim-textobj-user'
Plugin 'kristijanhusak/vim-multiple-cursors'
Plugin 'majutsushi/tagbar' " {{{
nnoremap <silent> <F4> :TagbarToggle<CR>
" }}}
Plugin 'mhinz/vim-signify' " {{{
let g:signify_vcs_list = ['git', 'svn']
" }}}
Plugin 'nixprime/cpsm'
Plugin 'nelstrom/vim-visual-star-search'
Plugin 'othree/xml.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'Raimondi/delimitMate'
Plugin 'rayburgemeestre/phpfolding.vim' " {{{
let g:DisableAutoPHPFolding = 1
nmap <silent> zp :EnablePHPFolds<CR>
nmap <silent> zP :DisablePHPFolds<CR>
" }}}
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree' " {{{
nnoremap <silent> <F3> :NERDTreeToggle<CR>
" }}}
Plugin 'scrooloose/syntastic' " {{{
let g:syntastic_check_on_open = 1
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_php_checkers = ['php']
" }}}
Plugin 'SirVer/ultisnips' " {{{
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
" }}}
Plugin 'sjl/gundo.vim' " {{{
nnoremap <F2> :GundoToggle<CR>
" }}}
Plugin 'tommcdo/vim-exchange'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-fugitive' " {{{
" Get rid of buffers opened when browsing the Git tree.
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
" }}}
Plugin 'tpope/vim-ragtag' " {{{
let g:ragtag_global_maps=1
" }}}
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'Valloric/MatchTagAlways'
Plugin 'vim-pandoc/vim-pandoc' " {{{
" I hate that everything is folded by default.
let g:pandoc#folding#fdc=0
let g:pandoc#folding#level=99
let g:pandoc#spell#enabled=0
" }}}
Plugin 'vim-pandoc/vim-pandoc-syntax' " {{{
let g:pandoc#syntax#conceal#use=0
" }}}
Plugin 'vim-php/tagbar-phpctags.vim'
Plugin 'vim-scripts/PreserveNoEOL' " Needed by editorconfig

call vundle#end()

" Initialization --------------------------------------------------------------
" Stuff here needs to run after `vundle#end()`

call ctrlp_bdelete#init()

" General settings ------------------------------------------------------------

filetype plugin indent on
syntax on

" Encodings
set encoding=utf-8
set fileencoding=utf-8

" Spelling
set spelllang=en_gb

" Tmp dirs
set backupdir=/tmp
set directory=/tmp

" Buffers
set autoread
set hidden
set nobackup
set switchbuf=useopen,usetab,newtab

" Tab defaults
set softtabstop=4
set tabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Display behaviour
set list
set listchars=tab:▸\ ,trail:·,eol:¬,extends:←,precedes:→
set showbreak=…
set backspace=indent,eol,start
set laststatus=2
set splitbelow
set splitright
set conceallevel=2 concealcursor=vin
set textwidth=160

" Diff options
set diffopt=vertical

" Indent behaviour
set autoindent
set smartindent
set formatprg=par\ w80qrg

" Search behaviour
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*.obj,*.pyc,**/.git/*,**/.svn/*

" Fold behaviour
" set foldopen=all
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
set foldclose=all

" Visuals
set background=light
set nowrap
set number
set ruler
set scrolloff=3
set showcmd
set noshowmode
set visualbell t_vb=

" Kill preview buffer
autocmd CompleteDone * pclose

" Configs for GUI app or terminal with more than 2 colors.
if has("gui_running")
    " Extra spacing between lines. Needed for some fonts.
    set linespace=1
    " No scroll bars, ever!
    set guioptions-=L
    set guioptions-=l
    set guioptions-=R
    set guioptions-=r
    set guifont=Source\ Code\ Pro:h15
endif


set cursorline
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline

colorscheme solarized

" Automatically exit insert mode after 10 seconds idle
autocmd InsertEnter * let updaterestore=&updatetime | set updatetime=10000
autocmd InsertLeave * let &updatetime=updaterestore
autocmd CursorHoldI * stopinsert

" Neater fold text display
function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '[ ' . printf("%10s", lines_count . ' lines') . ' ]'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()

" From Vimcasts #2
" Set tabstop, softtabstop and shiftwidth to the same value
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction
command! -nargs=* Stab call Stab()

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

" Special file type handling --------------------------------------------------

autocmd BufRead,BufNewFile */vpn/*.txt set filetype=pandoc

" Key mappings ----------------------------------------------------------------

" Summarize tab settings
map <leader>st :call SummarizeTabs()<CR>

" Move current line down/up
map <M-D-Down> ]e
map <M-D-Up> [e

" Move visually selected lines down/up
vmap <M-D-Down> ]egv
vmap <M-D-Up> [egv

" Move visual selection back/forwards
vmap <M-D-Left> x<BS>P`[v`]
vmap <M-D-Right> x<Space>P`[v`]

" Toggles & Switches
nmap <silent> <leader>l :set list!<CR>
nmap <silent> <leader>w :set wrap!<CR>
nmap <silent> <leader>s :set spell!<CR>
nmap <silent> <BS> :silent :nohlsearch<CR>
command! -nargs=* Wrap set wrap linebreak nolist

" Edit .vimrc
map <leader>vv :tabe $MYVIMRC<CR>
map <leader>vs :source $MYVIMRC<CR>

" Shortcuts for opening file in same directory as current file
cabbrev %% =expand("%:p:h")
map <leader>ee :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Buffer stuff
nmap <SwipeLeft> :bprevious<CR>
nmap <SwipeRight> :bnext<CR>

" Pad a line with the last character as filler.
nmap <leader>= $x80p80<Bar>D

" Remove extra spaces between words
nmap <leader>- ciw <Esc>

" Fix encoding
nmap <leader>ef :set ff=unix fenc=utf-8<CR>:write<CR>

" Reformat current paragraph or selection
vmap Q gq
nmap Q gqap

" Default to very magic mode
nnoremap / /\v

" Load all extra config -------------------------------------------------------

set runtimepath+=/Applications/LilyPond.app/Contents/Resources/share/lilypond/current/vim

" runtime! config/*.vim
" vim:ft=vim:foldmethod=marker
